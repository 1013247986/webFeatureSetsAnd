/**@命名标准化
  *===========================
  *  事件前加on后面跟大坨峰
  *  方法大坨峰
  *  公共方法小驼峰
  *------------------------------------------------------
  *  css中间—隔开
  *  命名以父元素最后一个单词加对应单词
  *  结构三级内不应该出现重复后缀命名
  *------------------------------------------------------
  *  文件名小坨峰
  *  组件文件命名大坨峰，引用时—隔开
  *------------------------------------------------------
  *  路由path普通英文 name大坨峰
  *------------------------------------------------------
  *  变量小驼峰
  *  临时变量下划线_开头
  *——————————————————————————————————————————————————————
  *@函数摆放标准化
  *===========================
  *  on事件放前面
  *  函数方法放中间
  *  数据请求放最后
  *------------------------------------------------------
  *  获取获取不处理数据，交给一个新的函数处理，方便以后其他组件传数据过来也可以直接使用这个函数进行渲染
  *——————————————————————————————————————————————————————
  *@组件化开发标准化
  *===========================
  *  重复超过三个的页面需要的
  *  布局（如表单，输入框验证组件）
  *  方法都封装起来
  *  数据单对象传入（以传的数据驱动视图）
  *  方法传入一个，以type分类处理，记得注释type
  *------------------------------------------------------
  *  除了组件嵌套尽量不超过2层，所有数据由父组件对应对象统一管理结构为二维对象，逻辑在各自组件完成，尽量少使用bas 传值！
  *------------------------------------------------------
  *  扩展：公共样式、方法、文件的命名和结构规范
  *  在所有需要使用到这个组件的共同父级下建立com文件夹
  *  以内容语义话单词加public命名 ，文件夹装文件，放在com文件夹里
  *——————————————————————————————————————————————————————
  *@模式运用
  *===========================
  *  1、单列模式，obj放数据，只有一个出口
  *  2、策略模式，少用if判断，用对象的key匹配
  *——————————————————————————————————————————————————————
  *@层级标准
  *===========================
  *  组件或div固定定位层级1—9区间
  *  水印层级暂定10
  *  多层弹窗层级20—29区间
  *  加载动画和提示层级30—39区间
  *——————————————————————————————————————————————————————
  *@数据传值
  *===========================
  *  多个router页面需要使用的数据才使用vuex 每个，繁杂的数据格式单独建对应数据名称的js模块，然后引入vuex? 避免vuex后期维护起来困难
  *------------------------------------------------------
  *  生命周期和钩子函数位置
  *  最上面是name，然后data函数，挂载函数
  *  生命周期按顺序放
  *  计算函数，监听函数，过滤器每个头部加注释
  */